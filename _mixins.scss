// fonts
@mixin font-serif($name, $size: false, $weight: false, $color: false, $style: false, $lh: false) {
    font-family: $name, "Times New Roman", Times, serif;
    @if $size {font-size: $size};
    @if $weight {font-weight: $weight};
    @if $color {color: $color};
    @if $style {font-style: $style;}
    @if $lh {line-height: $lh;}
}

@mixin font-sans-serif($name, $size: false, $weight: false, $color: false, $style: false, $lh: false) {
    font-family: $name, "Source Sans Pro", Helvetica, Verdana, sans-serif;
    @if $size {font-size: $size};
    @if $weight {font-weight: $weight};
    @if $color {color: $color};
    @if $style {font-style: $style;}
    @if $lh {line-height: $lh;}
}

// .selector {
//     @include font-serif("Noto Serif", 1.2rem, 700, #181818)
// }


// Positioning
@mixin pos($type, $args: 0 0 0 0) {
    position: $type;
    $offsets: top right bottom left;
    @if length($args) == 2 or length($args) == 4 {
        @if length($args) == 2 {
            $args: join($args, $args);
        }
        @each $offset in $offsets {
            $offsetVal: nth($args, index($offsets, $offset));
            #{$offset}: validOffset($offsetVal);
        }
    } @else {
        @warn "Invalid number of arguments. (Must be either 2 or 4).";
    }
}

@function validOffset($value) {
    @if type-of($value) == number {
        @if ($value != 0) {
            @return $value;
        } @else {
            @return null;
        }
    } @else if str-slice($value, 1, 1) == "f" {
        @return str-slice($value, 2);
    } @else if index(auto initial inherit, $value) {
        @return $value;
    } @else {
        @warn "Invalid offset value.";
        @return null;
    }
}

@mixin abs($args: 0 0 0 0) {
    @include pos(absolute, $args);
}
@mixin rel($args: 0 0 0 0) {
    @include pos(relative, $args);
}
@mixin fix($args: 0 0 0 0) {
    @include pos(fixed, $args);
}
@mixin sticky($args: 0 0 0 0) {
    @include pos(sticky, $args);
}

// .selector {
//     @include fix(0 0 auto auto)
// }

// Media query
// var-map
$breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 912px,
  xl: 1200px,
);

// Mixin
@mixin media($from: false, $until: false, $and: false, $media-type: all) {
    $min-width: 0;
    $max-width: 0;
    $query: "";

    //FROM: este breakpoint (inclusivo)
    @if $from {
        @if type-of($from) == number {
            $min-width: $from;
        } @else {
            $min-width: map-get($breakpoints, $from);
        }
    }

    //UNTIL: este breakpoint (exclusivo)
    @if $until {
        @if type-of($until) == number {
            $max-width: $until - 1px;
        } @else {
            $max-width: map-get($breakpoints, $until) - 1px;
        }
    }

    @if $min-width != 0 {
        $query: "#{$query} and (min-width: #{$min-width})";
    }
    @if $max-width != 0 {
        $query: "#{$query} and (max-width: #{$max-width})";
    }
    @if $and {
        $query: "#{$query} and (#{$and})";
    }

    @if ($media-type == "all" and $query != "") {
        $media-type: "";
        $query: str-slice(unquote($query), 6);
    }

    @media #{$media-type + $query} {
        @content;
    }
}

// .selector {
//     width: 50%;
//     @include media($from: "sm", $until: 900px, $and:"orientation: landscape"){
//         width: 100%;
//     }
// }

// extend - no es un mixin
.btn {
    border-radius: 2px;
    margin: 5px;
    padding: 5px;
 }
 
 .menu-button {
    @extend .btn;
    background-color: blue;
    color: white;
 }

// placeholder - no es un mixin
%baseHeading {
    font-family: $serif
}

h1, h2, h3, h4 {
    // font-family: $serif
    @extend %baseHeading
}
  